import socket
import threading
import json
from request.authRequest import handle_request as auth_request
from request.channelRequest import handle_channel_request  # Import x·ª≠ l√Ω channel
from config.db import client  # K·∫øt n·ªëi MongoDB


class TRACKER:
    def __init__(self, host="127.0.0.1", port=5000):
        self.peer_list = []  # Danh s√°ch c√°c peer ƒëang k·∫øt n·ªëi
        self.peer_list_lock = threading.Lock()  # Lock ƒë·ªÉ b·∫£o v·ªá truy c·∫≠p danh s√°ch
        self.tracker_server(host, port)  # Kh·ªüi ƒë·ªông server

    def handle_client(self, conn, addr):
        """X·ª≠ l√Ω client k·∫øt n·ªëi ƒë·∫øn tracker"""
        user_ip, user_port = addr 
        print(f"New connection from {user_ip}:{user_port}")
    
        try:
            while True:
                data = conn.recv(1024).decode('utf-8').strip()
                if not data:
                    break

                try:
                    command = json.loads(data)  # Gi·∫£i m√£ JSON
                except json.JSONDecodeError:
                    conn.sendall(json.dumps({"status": "ERROR", "message": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"}).encode('utf-8'))
                    continue

                if "command" not in command:
                    conn.sendall(json.dumps({"status": "ERROR", "message": "Thi·∫øu l·ªánh"}).encode('utf-8'))
                    continue

                cmd = command["command"]

                if cmd == "CONNECT":
                    if not all(k in command for k in ["name", "ip", "port"]):
                        conn.sendall(json.dumps({"status": "ERROR", "message": "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt"}).encode('utf-8'))
                        continue

                    name, ip, port = command["name"], command["ip"], command["port"]

                    with self.peer_list_lock:
                        if not any(n == name and i == ip and p == port for n, i, p, _ in self.peer_list):
                            self.peer_list.append((name, ip, port, conn))
                            print(f"[INFO] ƒê√£ th√™m peer: {name} ({ip}:{port})")
                            response = {"status": "OK", "message": f"Peer {name} ({ip}:{port}) ƒë√£ ƒë∆∞·ª£c th√™m"}
                        else:
                            response = {"status": "OK", "message": f"Peer {name} ({ip}:{port}) ƒë√£ t·ªìn t·∫°i"}

                    conn.sendall(json.dumps(response).encode('utf-8'))

                elif cmd == "GET_LIST":
                    if "name" not in command:
                        conn.sendall(json.dumps({"status": "ERROR", "message": "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt"}).encode('utf-8'))
                        continue

                    with self.peer_list_lock:
                        peer_data = [{"name": n, "ip": i, "port": p} for n, i, p, _ in self.peer_list]

                    response = {"status": "OK", "peer_list": peer_data}
                    conn.sendall(json.dumps(response).encode('utf-8'))
                    print(f"[INFO] G·ª≠i danh s√°ch peer ƒë·∫øn {command['name']}")

                elif cmd == "LEAVE":
                    if not all(k in command for k in ["name", "ip", "port"]):
                        conn.sendall(json.dumps({"status": "ERROR", "message": "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt"}).encode('utf-8'))
                        continue

                    name, ip, port = command["name"], command["ip"], command["port"]

                    with self.peer_list_lock:
                        for peer in self.peer_list:
                            if peer[:3] == (name, ip, port):  # So s√°nh 3 ph·∫ßn t·ª≠ ƒë·∫ßu
                                self.peer_list.remove(peer)
                                print(f"[INFO] Peer {name} ({ip}:{port}) ƒë√£ r·ªùi kh·ªèi tracker.")
                                response = {"status": "OK", "message": f"Peer {name} ({ip}:{port}) ƒë√£ r·ªùi ƒëi"}
                                break
                        else:
                            response = {"status": "ERROR", "message": f"Peer {name} ({ip}:{port}) kh√¥ng t·ªìn t·∫°i"}

                    conn.sendall(json.dumps(response).encode('utf-8'))

                elif cmd == "MSG_SEND":
                    if not all(k in command for k in ["ip", "port", "name", "channel" ,"message"]):
                        conn.sendall(json.dumps({"status": "ERROR", "message": "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt"}).encode('utf-8'))
                        continue

                    name, ip, port, channel ,message = command["name"], command["ip"], command["port"], command["channel"], command["message"]
                    print(f"[CHAT] {name} from {channel}: {message}")

                    with self.peer_list_lock:
                        disconnected_peers = []
                        #PH√ÇN PH·ªêI TIN NH·∫ÆN ƒê·∫æN C√ÅC NH·ªÆNG NG∆Ø·ªúI G·ª¨I C√ì TRONG CHANNEL
                        
                        #L·∫§Y DANH S√ÅCH C√ÅC PEER TRONG CHANNEL
                        if channel == "GENERRAL":
                            peers_in_channel = self.peer_list
                        else:
                            pass
                            #DEVELOP
                        

                        for name_list, ip_list, port_list, peer_conn in peers_in_channel:
                            if ip == ip_list and port == port_list:
                                continue  # Kh√¥ng g·ª≠i l·∫°i cho ng∆∞·ªùi g·ª≠i

                            try:
                                json_message = json.dumps({
                                    "command": "MSG_RECV",
                                    "client_name": name,
                                    "message": message
                                })

                                peer_conn.sendall(json_message.encode('utf-8'))
                                print(f"[INFO] ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn {name_list} ({ip_list}:{port_list})")

                            except Exception:
                                print(f"[ERROR] Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn {name_list} ({ip_list}:{port_list})")
                                disconnected_peers.append((name_list, ip_list, port_list, peer_conn))

                        # X√≥a c√°c peer ƒë√£ m·∫•t k·∫øt n·ªëi
                        for peer in disconnected_peers:
                            self.peer_list.remove(peer)
                            print(f"[INFO] X√≥a peer kh√¥ng c√≤n k·∫øt n·ªëi: {peer[0]} ({peer[1]}:{peer[2]})")

                elif cmd in ["create_channel", "join_channel", "get_user_channels", "send_message", "get_channel_info", "delete_channel", "get_all_channels"]:
                    response = handle_channel_request(data)
                    conn.sendall(json.dumps(response.encode()))
                    
                elif cmd in ["register_user","login_user","vistor_mode","logout_user"]:
                    response = auth_request(data, user_port, user_port)
                    conn.send(json.dumps(response.encode()))

                else:
                    conn.sendall(json.dumps({"status": "ERROR", "message": "L·ªánh kh√¥ng h·ª£p l·ªá"}).encode('utf-8'))

        except Exception as e:
            print(f"[ERROR] L·ªói x·ª≠ l√Ω client: {e}")

        finally:
            conn.close()
            print(f"üî¥ K·∫øt n·ªëi v·ªõi {addr} ƒë√£ ƒë√≥ng.")

    def tracker_server(self, host="127.0.0.1", port=5000):
        """Kh·ªüi ƒë·ªông tracker server"""
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server.bind((host, port))
        server.listen(5)
        print(f"[START] Tracker ƒëang l·∫Øng nghe tr√™n {host}:{port}")

        while True:
            conn, addr = server.accept()
            threading.Thread(target=self.handle_client, args=(conn, addr), daemon=True).start()


if __name__ == "__main__":
    TRACKER()
